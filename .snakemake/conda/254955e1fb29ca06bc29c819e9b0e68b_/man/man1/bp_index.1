.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_INDEX 1"
.TH BP_INDEX 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_index.pl \- indexes files for use by bp_fetch.pl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
bp_index.pl index_name file1 file2 etc.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
bp_index.pl builds a bioperl index for the sequence files given in the
argument list, under the index name. For example
.PP
.Vb 1
\&   bp_index.pl nrdb /data/nrdb/nrdb.fasta
.Ve
.PP
would build an index called 'nrdb' as the index name for the file
nrdb.fasta, and
.PP
.Vb 1
\&   bp_index.pl \-fmt EMBL swiss /data/swiss/*.dat
.Ve
.PP
would build an index called swiss for all the files in /data/swiss
which end in .dat which are in \s-1EMBL\s0 format.
.PP
The indexes are built using the Bio/Index/* modules, in particular,
Bio::Index::EMBL and the Bio::Index::Fasta modules. Any script which
uses these modules can use the index. A good example script is bp_fetch
which fetches sequences and pipes them to \s-1STDOUT,\s0 for example
.PP
.Vb 1
\&   bp_fetch swiss:ROA1_HUMAN
.Ve
.PP
gets the \s-1ROA1_HUMAN\s0 sequence from the swiss index and writes it as
fasta format on \s-1STDOUT.\s0
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 3
\&  \-fmt  <format>   \- Fasta (default), swiss or EMBL
\&  \-dir  <dir>      \- directory where the index files are found
\&                     (overrides BIOPERL_INDEX environment variable)
.Ve
.PP
Options for expert use
.PP
.Vb 3
\&  \-type <db_type>  \- DBM_file type. 
\&                     (overrides BIOPERL_INDEX_TYPE environment variable)
\&  \-v               \- report every index addition (debugging)
.Ve
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
bp_index and bp_fetch coordinate where the databases lie using the
environment variable \s-1BIOPERL_INDEX.\s0 This can be overridden using the
\&\-dir option. There is no default value, so you must use the \-dir option 
or set \s-1BIOPERL_INDEX.\s0
.PP
The \s-1DB\s0 type is coordinated with \s-1BIOPERL_INDEX_TYPE\s0 which if it
is not there, defaults to whatever the bioperl modules have installed,
which itself defaults to SDBM_File.
.SH "USING IT YOURSELF"
.IX Header "USING IT YOURSELF"
bp_index.pl is a script that drives the Index modules. If you want to 
use this script heavily in your work, if it is Perl based, it is 
almost certainly better to look at the code in this script and copy
it across (probably you will be more likely to want to use the bp_fetch
code).
.SH "EXTENDING IT"
.IX Header "EXTENDING IT"
bp_index is just a wrapper around James Gilbert's excellent Index modules
found in bioperl
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ewan Birney"
.IX Header "AUTHOR - Ewan Birney"
Ewan Birney <birney@ebi.ac.uk>
