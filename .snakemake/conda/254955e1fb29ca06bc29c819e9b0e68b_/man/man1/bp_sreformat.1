.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_SREFORMAT 1"
.TH BP_SREFORMAT 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bpsreformat \- convert sequence formats
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script uses the SeqIO system that allows conversion of sequence
formats either sequence data or multiple sequence alignment data.  The
name comes from the fact that Sean Eddy's program sreformat (part of
the \s-1HMMER\s0 pkg) already does this.  Sean's program tries to guess the
input formats while in our code we currently require your to specify what
the input and output formats are and if the data is from a multiple
sequence alignment or from straight sequence files.
.PP
Usage:
.PP
bpsreformat \-if \s-1INFORMAT\s0 \-of \s-1OUTFORMAT\s0 \-i \s-1FILENAME\s0 \-o output.FORMAT
.PP
.Vb 1
\&  \-h/\-\-help        Print this help
\&
\&  \-if/\-\-informat   Specify the input format
\&
\&  \-of/\-\-outformat  Specify the output format
\&
\&  \-i/\-\-input       Specify the input file name
\&                   (to pass in data on STDIN use minus sign as filename)
\&  \-o/\-\-output      Specify the output file name
\&                   (to pass data out on STDOUT use minus sign as filename)
\&
\&  \-\-msa            Specify this is multiple sequence alignment data
\&
\&  \-\-special        Will pass on special parameters to the AlignIO/SeqIO
\&                   object \-\- most of these are for Bio::AlignIO objects
\&                   Comma separated list of the following
\&                   nointerleaved   \-\- for phylip,non\-interleaved format
\&                   idlinebreak     \-\- for phylip, makes it molphy format
\&                   percentages     \-\- for clustalw, show % id per line
.Ve
