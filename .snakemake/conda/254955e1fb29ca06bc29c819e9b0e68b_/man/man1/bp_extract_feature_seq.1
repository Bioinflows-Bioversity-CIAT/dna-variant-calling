.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_EXTRACT_FEATURE_SEQ 1"
.TH BP_EXTRACT_FEATURE_SEQ 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_extract_feature_seq \- extract the corresponding sequence for a specified feature type
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
bp_extract_feature_seq [\-\-format \s-1FORMAT\s0] [\-\-feature \s-1CDS\s0] [\-\-output \s-1FILE\s0] [\-\-input] \s-1FILE\s0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will extract the sequence for all the features you specify.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-i\fR, \fB\-\-input\fR" 4
.IX Item "-i, --input"
Specifies the sequence file to be read.
.IP "\fB\-\-format\fR" 4
.IX Item "--format"
Format of the file specified by \fB\-\-input\fR. If not given, it will try to guess the
correct format from the file extension.
.IP "\fB\-\-feature\fR" 4
.IX Item "--feature"
Feature to be extracted. By default, it extracts the \s-1CDS\s0 feature.
.IP "\fB\-o\fR, \fB\-\-output\fR" 4
.IX Item "-o, --output"
File where the extracted features will be saved. If not specified, \s-1STDOUT\s0 is used.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list. Your participation is much appreciated.
.PP
.Vb 2
\&  L<bioperl\-l@bioperl.org>                  \- General discussion
\&  L<http://bioperl.org/wiki/Mailing_lists>  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 1
\&  L<https://github.com/bioperl/bioperl\-live/issues>
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& Jason Stajich <jason\-at\-bioperl\-dot\-org>
.Ve
