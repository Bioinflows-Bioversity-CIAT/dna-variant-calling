.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_SEARCH2GFF 1"
.TH BP_SEARCH2GFF 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_search2gff \- turn a SearchIO report into GFF
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage:
.PP
.Vb 1
\&  bp_search2gff [\-o outputfile] [\-f reportformat] [\-i inputfilename]  OR file1 file2 ..
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will turn a SearchIO report (\s-1BLAST, FASTP, SSEARCH,
AXT, WABA\s0) into \s-1GFF.\s0
.PP
The options are:
.PP
.Vb 10
\&   \-i infilename      \- (optional) inputfilename, will read
\&                        either ARGV files or from STDIN
\&   \-o filename        \- the output filename [default STDOUT]
\&   \-f format          \- search result format (blast, fasta,waba,axt)
\&                        (ssearch is fasta format). default is blast.
\&   \-t/\-\-type seqtype  \- if you want to see query or hit information
\&                        in the GFF report
\&   \-s/\-\-source        \- specify the source (will be algorithm name
\&                        otherwise like BLASTN)
\&   \-\-method           \- the method tag (primary_tag) of the features
\&                        (default is similarity)
\&   \-\-scorefunc        \- a string or a file that when parsed evaluates
\&                        to a closure which will be passed a feature
\&                        object and that returns the score to be printed
\&   \-\-locfunc          \- a string or a file that when parsed evaluates
\&                        to a closure which will be passed two
\&                        features, query and hit, and returns the
\&                        location (Bio::LocationI compliant) for the
\&                        GFF3 feature created for each HSP; the closure
\&                        may use the clone_loc() and create_loc()
\&                        functions for convenience, see their PODs
\&   \-\-onehsp           \- only print the first HSP feature for each hit
\&   \-p/\-\-parent        \- the parent to which HSP features should refer
\&                        if not the name of the hit or query (depending
\&                        on \-\-type)
\&   \-\-target/\-\-notarget \- whether to always add the Target tag or not
\&   \-h                 \- this help menu
\&   \-\-version          \- GFF version to use (put a 3 here to use gff 3)
\&   \-\-component        \- generate GFF component fields (chromosome)
\&   \-m/\-\-match         \- generate a \*(Aqmatch\*(Aq line which is a container
\&                        of all the similarity HSPs
\&   \-\-addid            \- add ID tag in the absence of \-\-match
\&   \-c/\-\-cutoff        \- specify an evalue cutoff
.Ve
.PP
Additionally specify the filenames you want to process on the
command-line.  If no files are specified then \s-1STDIN\s0 input is assumed.
You specify this by doing: bp_search2gff < file1 file2 file3
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Stajich, jason-at-bioperl-dot-org
.SH "Contributors"
.IX Header "Contributors"
Hilmar Lapp, hlapp-at-gmx-dot-net
.SS "clone_loc"
.IX Subsection "clone_loc"
Title   : clone_loc
Usage   : my \f(CW$l\fR = clone_loc($feature\->location);
Function: Helper function to simplify the task of cloning locations
           for \-\-locfunc closures.
.PP
.Vb 6
\&          Presently simply implemented using Storable::dclone().
\&Example :
\&Returns : A L<Bio::LocationI> object of the same type and with the
\&          same properties as the argument, but physically different.
\&          All structured properties will be cloned as well.
\&Args    : A L<Bio::LocationI> compliant object
.Ve
.SS "create_loc"
.IX Subsection "create_loc"
Title   : create_loc
Usage   : my \f(CW$l\fR = create_loc(\*(L"10..12\*(R");
Function: Helper function to simplify the task of creating locations
          for \-\-locfunc closures. Creates a location from a feature\-
          table formatted string.
.PP
Example :
Returns : A Bio::LocationI object representing the location given
          as formatted string.
Args    : A GenBank feature-table formatted string.
