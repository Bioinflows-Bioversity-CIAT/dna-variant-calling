.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_TAXONOMY2TREE 1"
.TH BP_TAXONOMY2TREE 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_taxonomy2tree \- Building a taxonomic tree based on the full lineages of a set of species names
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This scripts looks up the provided species names in the \s-1NCBI\s0 Taxonomy database,
retrieves their full lineage and puts them in a Newick taxonomic tree displayed
on screen.
.PP
.Vb 2
\&  bp_taxonomy2tree.pl \-s Orangutan \-s Gorilla \-s Chimpanzee \-s Human
\&  bp_taxonomy2tree.pl \-s Orangutan \-s Gorilla \-s Chimpanzee \-s "Homo Sapiens"
.Ve
.PP
Can also provide \-d to specify the directory to store index files in, \-o to
specify the location of your \s-1NCBI\s0 nodes file, and \-a for the \s-1NCBI\s0 names file.
Or the option \-e to use the web-based Entrez taxonomy database if you do not
have the \s-1NCBI\s0 flatfiles installed.
.PP
This script requires that the bioperl-run pkg be also installed.
.PP
Providing the nodes.dmp and names.dmp files from the \s-1NCBI\s0 Taxonomy
dump (see Bio::DB::Taxonomy::flatfile for more info) is only necessary
on the first time running.  This will create the local indexes and may
take quite a long time.  However once created, these indexes will
allow fast access for species to taxon id \s-1OR\s0 taxon id to species name
lookups.
.SH "AUTHOR \- Gabriel Valiente, reimplemented by Sendu Bala"
.IX Header "AUTHOR - Gabriel Valiente, reimplemented by Sendu Bala"
Email valiente@lsi.upc.edu
Email bix@sendu.me.uk
