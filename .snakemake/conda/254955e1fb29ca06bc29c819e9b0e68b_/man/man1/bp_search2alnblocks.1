.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_SEARCH2ALNBLOCKS 1"
.TH BP_SEARCH2ALNBLOCKS 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_search2alnblocks \- Turn SearchIO parseable reports(s) into a set of aligned blocks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  bp_search2alnblocks \-\-minid PERCENTID \-\-minlen LEN \-\-minevalue EVALUE file1.
\&  blast file2.blast ...> out.fas
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script will parse and filter \s-1BLAST\s0 (or other formats
Bio::SearchIO can parse) output and format the alignment as blocks
of alignments based on the HSPs.  Note this can only work if the input
file parsed contains the necessary.
.PP
Typically this can be used to turn \s-1BLAST\s0 output into a \s-1FASTA\s0 alignment format for input into the \s-1QRNA\s0 comparative gene finder for \s-1RNA\s0 genes (E.Rivas).
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 10
\& \-\-maxevalue   Maximum E\-value for an HSP
\& \-\-minevalue   Minimum E\-value for an HSP 
\& \-\-minlen      Minimum length of an HSP [default 0] 
\& \-\-maxid       Maximum Percent Id [default 100]
\&               (to help remove sequences which are really close)
\& \-\-minid       Minimum Percent Identity for an HSP [default 0]
\& \-i/\-\-input    An optional input filename (expects input on STDIN by default)
\& \-o/\-\-output   An optional output filename (exports to STDOUT by default)
\& \-f/\-\-format   Specify a different Search Alignment format\- 
\&               {fasta, axt, waba, blast, blastxml} are all permitted
\&               although the format must have actual alignment 
\&               sequence for this script to work
\&               See L<Bio::SearchIO> for more information.
\& \-of/\-\-outformat Output format for the alignment blocks, anything
\&               L<Bio::AlignIO> supports.
\& \-v/\-\-verbose  Turn on debugging
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Jason Stajich, jason-at-bioperl-dot-org.
