.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_BIOFLAT_INDEX 1"
.TH BP_BIOFLAT_INDEX 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_bioflat_index.pl \- index sequence files using Bio::DB::Flat
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\& Create or update a biological sequence database indexed with the
\& Bio::DB::Flat indexing scheme.  The arguments are a list of flat files
\& containing the sequence information to be indexed.
.Ve
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\& bp_bioflat_index.pl <options> file1 file2 file3...
\&
\& Options:
\&
\&     \-\-create              Create or reinitialize the index.  If not specified,
\&                           the index must already exist.
\&
\&     \-\-format   <format>   The format of the sequence files.  Must be one
\&                           of "genbank", "swissprot", "embl" or "fasta".
\&
\&     \-\-location <path>     Path to the directory in which the index files
\&                           are stored.
\&
\&     \-\-dbname <name>       The symbolic name of the database to be created.
\&
\&     \-\-indextype <type>    Type of index to create.  Either "bdb" or "flat".
\&                           "binarysearch" is the same as "flat".
.Ve
.PP
Options can be abbreviated.  For example, use \-i for \-\-indextype.
.PP
The following environment variables will be used as defaults if the 
corresponding options are not provided:
.PP
.Vb 4
\&     OBDA_FORMAT      format of sequence file
\&     OBDA_LOCATION    path to directory in which index files are stored
\&     OBDA_DBNAME      name of database
\&     OBDA_INDEX       type of index to create
.Ve
