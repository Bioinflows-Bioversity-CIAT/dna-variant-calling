.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "BP_SEARCH2TRIBE 1"
.TH BP_SEARCH2TRIBE 1 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_search2tribe \- Turn SearchIO parseable reports(s) into TRIBE matrix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Usage:
  bp_search2tribe [\-o outputfile] [\-f reportformat] [\-w/\-\-weight] file1 file2 ..
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is probably too slow for most people's uses.  It is better
to use something like scripts/searchio/fastam9_to_table, \-m 9 output
from \s-1BLAST,\s0 or the blast2table from the \s-1BLAST O\s0'Reilly book to get a
tabular output from these programs and then feed the table into \s-1MCL\s0
with the mcxdeblast script and the \-\-m9 option.
.PP
This script will turn a protein Search report (\s-1BLASTP, FASTP, SSEARCH\s0)
into a Markov Matrix for TribeMCL clustering.
.PP
The options are:
.PP
.Vb 6
\&   \-o filename          \- the output filename [default STDOUT]
\&   \-f format            \- search result format (blast, fasta)
\&                          (ssearch is fasta format). default is blast.
\&   \-w or \-\-weight VALUE \- Change the default weight for E(0.0) hits
\&                          to VALUE (default=200 (i.e. 1e\-200) )
\&   \-h                   \- this help menu
.Ve
.PP
Additionally specify the filenames you want to process on the
command-line.  If no files are specified then \s-1STDIN\s0 input is assumed.
You specify this by doing: bp_search2tribe < file1 file2 file3
.SH "AUTHOR"
.IX Header "AUTHOR"
Jason Stajich, jason-at-bioperl-dot-org
