.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Run::AnalysisFactory 3"
.TH Bio::Tools::Run::AnalysisFactory 3 "2021-02-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Run::AnalysisFactory \- A directory of analysis tools
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # list all available analyses from the default location,
\&  # using a default (SOAP) access method
\&  use Bio::Tools::Run::AnalysisFactory;
\&  my $list = Bio::Tools::Run::AnalysisFactory\->new();
\&                \->available_analyses;
\&  use Data::Dumper; print Dumper ($list);
\&
\&  # ditto, but from a different location
\&  use Bio::Tools::Run::AnalysisFactory;
\&  my $list =
\&     Bio::Tools::Run::AnalysisFactory\->new(\-location => \*(Aqhttp://somewhere/something\*(Aq)
\&                \->available_analyses;
\&
\&  # ...and using a different access method
\&  # (this example is not yet impelmented)
\&  use Bio::Tools::Run::AnalysisFactory;
\&  my $list =
\&     Bio::Tools::Run::AnalysisFactory\->new(\-location => \*(Aqhttp://somewhere/something\*(Aq,
\&                                           \-access => \*(Aqnovella\*(Aq)
\&                \->available_analyses;
\&
\&  # list available categories of analyses
\&  use Bio::Tools::Run::AnalysisFactory;
\&  my $categories =
\&     Bio::Tools::Run::AnalysisFactory\->new();
\&                \->available_categories;
\&  use Data::Dumper; print Dumper ($categories);
\&
\&  # show all analyses group by categories
\&  use Bio::Tools::Run::AnalysisFactory;
\&  my $factory = Bio::Tools::Run::AnalysisFactory\->new();
\&  foreach $cat ( @{ $factory\->available_categories } ) {
\&    my @sublist = @{ $factory\->available_analyses ($cat) };
\&    print "$cat:\en\et",
\&          join ("\en\et", @{ $factory\->available_analyses ($cat) }),
\&          "\en";
\&  }
\&
\&  # create an analysis object
\&  use Bio::Tools::Run::AnalysisFactory;
\&  $service = Bio::Tools::Run::AnalysisFactory\->new();
\&                 \->create_analysis (\*(Aqedit.seqret\*(Aq);
\&  $service\->run (
\&                #...
\&                )\->results;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module represents a list of available analysis tools from a given
location using a given access method. Additionally, for any of the
available analyses, it can create an object of type \f(CW\*(C`Bio::Tools::Run::Analysis\*(C'\fR.
.PP
The module is a higher-level abstraction whose main job is to load a
\&'real\-work\-doing' implementation. Which one is used, it depends on the
\&\f(CW\*(C`\-access\*(C'\fR parameter. The same design is used here as for
\&\f(CW\*(C`Bio::Tools::Run::Analysis\*(C'\fR module.
.PP
There is available a \fI\s-1SOAP\s0\fR access to almost all \s-1EMBOSS\s0 applications,
running at European Bioinformatics Institute.
.PP
The documentation of all \f(CW\*(C`public\*(C'\fR methods are to be found
in \f(CW\*(C`Bio::Factory::AnalysisI\*(C'\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Senger (martin.senger@gmail.com)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003, Martin Senger and EMBL-EBI.
All Rights Reserved.
.PP
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
This software is provided \*(L"as is\*(R" without warranty of any kind.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
http://www.ebi.ac.uk/soaplab/Perl_Client.html
.SH "APPENDIX"
.IX Header "APPENDIX"
Here is the rest of the object methods.  Internal methods are preceded
with an underscore _.
.SS "new"
.IX Subsection "new"
.Vb 9
\& Usage   : my $factory =
\&             Bio::Tools::Run::AnalysisFactory\->new(\-access => \*(Aqsoap\*(Aq,
\&                                                   \-location => \*(Aqhttp://...\*(Aq);
\& Returns : a new Bio::Tools::Run::AnalysisFactory object representing a list
\&           of available analyses
\& Args    : There may be additional arguments which are specific
\&           to the access method (see methods \*(Aqnew\*(Aq or \*(Aq_initialize\*(Aq
\&           of the access\-specific implementations (such as module
\&           Bio::Tools::Run::AnalysisFactory::soap for a SOAP\-based access).
\&
\&           The recognised and used arguments are:
\&             \-access
\&             \-location
\&             \-httpproxy
\&             \-timeout
.Ve
.PP
It builds, populates and returns a new \f(CW\*(C`Bio::Tools::Run::AnalysisFactory\*(C'\fR object. This
is how it is seen from the outside. But in fact, it builds, populates
and returns a more specific lower-level object, for example
\&\f(CW\*(C`Bio::Tools::Run::AnalysisFactory::soap\*(C'\fR object \- which one it is it depends on the \f(CW\*(C`\-access\*(C'\fR
parameter.
.IP "\-access" 4
.IX Item "-access"
It indicates what lower-level module to load.  Default is 'soap'.
Other (but future) possibilities are:
.Sp
.Vb 2
\&   \-access => \*(Aqnovella\*(Aq
\&   \-access => \*(Aqlocal\*(Aq
.Ve
.IP "\-location" 4
.IX Item "-location"
A location of the service. The contents is access-specific (see
details in the lower-level implementation modules).
.Sp
Default is \f(CW\*(C`http://www.ebi.ac.uk/soaplab/services\*(C'\fR (there are
services running at European Bioinformatics Institute on top of most
of \s-1EMBOSS\s0 analyses, and on some others).
.IP "\-httpproxy" 4
.IX Item "-httpproxy"
In addition to the \fIlocation\fR parameter, you may need to specify also
a location/URL of an \s-1HTTP\s0 proxy server (if your site requires
one). The expected format is \f(CW\*(C`http://server:port\*(C'\fR.  There is no
default value. It is also an access-specific parameter which may not
be used by all access methods.
.IP "\-timeout" 4
.IX Item "-timeout"
For long(er) running jobs the \s-1HTTP\s0 connection may be time-outed. In
order to avoid it (or, vice-versa, to call timeout sooner) you may
specify \f(CW\*(C`timeout\*(C'\fR with the number of seconds the connection will be
kept alive. Zero means to keep it alive forever. The default value is
two minutes.
.SS "_load_access_module"
.IX Subsection "_load_access_module"
.Vb 4
\& Usage   : $class\->_load_access_module ($access)
\& Returns : 1 on success, undef on failure
\& Args    : \*(Aqaccess\*(Aq should contain the last part of the
\&           name of a module who does the real implementation
.Ve
.PP
It does (in the run-time) a similar thing as
.PP
.Vb 1
\&   require Bio::Tools::Run::AnalysisFactory::$access
.Ve
.PP
It prints an error on \s-1STDERR\s0 if it fails to find and load the module
(for example, because of the compilation errors in the module).
.SS "_guess_access"
.IX Subsection "_guess_access"
.Vb 5
\& Usage   : $class\->_guess_access ($rh_params)
\& Returns : string with a guessed access protocol (e.g. \*(Aqsoap\*(Aq),
\&           or undef if the guessing failed
\& Args    : \*(Aqrh_params\*(Aq is a hash reference containing parameters given
\&           to the \*(Aqnew\*(Aq method.
.Ve
.PP
It makes an expert guess what kind of access/transport protocol should
be used to access the underlying analysis. The guess is based on the
parameters in \fIrh_params\fR. Remember that this method is called only
if there was no \fI\-access\fR parameter which could tell directly what
access method to use.
.SS "\s-1VERSION\s0 and Revision"
.IX Subsection "VERSION and Revision"
.Vb 2
\& Usage   : print $Bio::Tools::Run::AnalysisFactory::VERSION;
\&           print $Bio::Tools::Run::AnalysisFactory::Revision;
.Ve
